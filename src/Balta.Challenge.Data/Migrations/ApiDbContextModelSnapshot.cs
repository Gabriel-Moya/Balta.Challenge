// <auto-generated />
using System;
using Balta.Challenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Balta.Challenge.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Balta.Challenge.Core.Contexts.Account.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Balta.Challenge.Core.Contexts.Address.Entities.Locale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.HasKey("Id");

                    b.ToTable("Locales", (string)null);
                });

            modelBuilder.Entity("Balta.Challenge.Core.Contexts.Address.Entities.Locale", b =>
                {
                    b.OwnsOne("Balta.Challenge.Core.Contexts.Address.ValueObjects.IBGECode", "IBGECode", b1 =>
                        {
                            b1.Property<Guid>("LocaleId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("IBGEcode");

                            b1.HasKey("LocaleId");

                            b1.ToTable("Locales");

                            b1.WithOwner()
                                .HasForeignKey("LocaleId");
                        });

                    b.OwnsOne("Balta.Challenge.Core.Contexts.Address.ValueObjects.State", "State", b1 =>
                        {
                            b1.Property<Guid>("LocaleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("State");

                            b1.HasKey("LocaleId");

                            b1.ToTable("Locales");

                            b1.WithOwner()
                                .HasForeignKey("LocaleId");
                        });

                    b.Navigation("IBGECode")
                        .IsRequired();

                    b.Navigation("State")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
